# Note: application.secret unset in DEV, injected in TEST/PROD

play {
  application.loader = "AppLoader"
  application.langs = "en"

  http{
    session {
      httpOnly = false
      secure = true
    }
    forwarded.trustedProxies=["0.0.0.0/0", "::/0"]
  }

  # Quick hack
  # TODO: rely on URL cache busting instead
  assets.defaultCache="public, max-age=60"
}

es {
  cluster: media-service
  port: 9300
}

image.processors = [
  "bbc.lib.processors.BBCSupplierProcessors$",
  "bbc.lib.processors.BBCPhotographerParser"
]

field.aliases = [
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:xelvis_collection.name",
    alias = "elvisCollection",
    label = "Catalogue",
    displaySearchHint = true
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:pictureshows",
    alias = "pictureShows",
    label = "Picture Shows",
    displaySearchHint = true
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:programme_maker",
    alias = "progMaker",
    label = "Prog Maker",
    displaySearchHint = true
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:channel",
    alias = "channel",
    label = "Channel",
    displaySearchHint = true
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:episode",
    alias = "episode",
    label = "Episode",
    displaySearchHint = false
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:misc_notes",
    alias = "miscNotes",
    label = "Misc Notes",
    displaySearchHint = false
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:news_usage",
    alias = "newsUse",
    label = "News Use",
    displaySearchHint = false
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:non_news_usage",
    alias = "nonNewsUse",
    label = "Non News Use",
    displaySearchHint = true
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:commissioning_dept",
    alias = "comDept",
    label = "Com Dept.",
    displaySearchHint = true
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:xelvis_format",
    alias = "pictureFormat",
    label = "Picture Format",
    displaySearchHint = true,
    searchHintOptions = [
      "Agency Download",
      "Artwork",
      "Black & White Negative",
      "Black & White Print",
      "Colour Negative",
      "CD ROM",
      "Colour Print",
      "Colour Transparency",
      "Copy Camera",
      "Digital Stills Camera",
      "Email",
      "FTP Transfer",
      "Graphic Design",
      "Internet",
      "Nikon D1 Digital Camera",
      "Picture Publicity BBS",
      "Unclassified",
      "VT Freeze Frame",
      "Wire"
    ]
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:picdar_urn",
    alias = "picPubURN",
    label = "Picpub URN",
    displaySearchHint = false
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:picpub_owner",
    alias = "picPubOwner",
    label = "Picpub  Owner",
    displaySearchHint = true
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:hard_copy_ref",
    alias = "hardCopyRef",
    label = "Hard Copy Ref.",
    displaySearchHint = false
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:programme_number",
    alias = "programmeNo",
    label = "Programme no",
    displaySearchHint = true
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:programme_genre",
    alias = "programmeGenre",
    label = "Programme Genre",
    displaySearchHint = true,
    searchHintOptions = [
      "Access",
      "Arts",
      "Chat Show",
      "Childrens",
      "Cookery",
      "Costume Drama",
      "Current Affairs",
      "Disabled",
      "Documentary",
      "Drama",
      "Environmental",
      "Ethnic",
      "Educational",
      "Factual",
      "Features",
      "Gardening",
      "History",
      "Lifestyle",
      "Light Entertainment",
      "Music",
      "Nature",
      "Quiz Show",
      "Religious",
      "Schools",
      "Science",
      "Science Fiction",
      "Sitcom",
      "Sports and Games",
      "Travel",
      "Weather",
      "Youth",
      "-"
    ]
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:tx_date",
    alias = "txDate",
    label = "Tx Date",
    displaySearchHint = true
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:CopyRight Information",
    alias = "copyrightStatus",
    label = "Copyright Status",
    displaySearchHint = true
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:id",
    alias = "id",
    label = "ID",
    displaySearchHint = false
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:status",
    alias = "status",
    label = "Status",
    displaySearchHint = true
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:live_killdate",
    alias = "liveKillDate",
    label = "Live/Killdate",
    displaySearchHint = true
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:last_modified",
    alias = "lastMod",
    label = "Last mod.",
    displaySearchHint = false
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:jarvis_dataset_name",
    alias = "dataset",
    label = "Dataset",
    displaySearchHint = false
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:Copyright Information",
    alias = "ccInfo",
    label = "Cc info",
    displaySearchHint = true
  }
  {
    elasticsearchPath = "metadata.specialInstructions"
    alias = "specialInstructions"
    label = "Special instructions"
    displaySearchHint = true
    displayInAdditionalMetadata = false
  }
  {
    elasticsearchPath = "fileMetadata.xmp.bbc:xpng_wolftechStoryId",
    alias = "wolftechStoryId",
    label = "Wolftech Story Id",
    displaySearchHint = true,
    displayInAdditionalMetadata = true
  }
  {
    elasticsearchPath = "usageRights.category",
    alias = "usageRights",
    label = "Usage Rights",
    displaySearchHint = true
  }
]
authentication.providers {
  machine {
    className = "com.gu.mediaservice.lib.auth.provider.ApiKeyAuthenticationProvider"
    config {
      # authKeyStoreBucket = <s3-bucket-with-api-keys>
    }
  }
  # TODO: short term we put panda here for backwards compatibility but the default provider should be something better
  user {
    className = "com.gu.mediaservice.lib.auth.provider.LocalAuthenticationProvider"
    config {
      # all of the things relating to pan domain auth (these are currently sensibly defaulted in code)
      # panda.system = media-service
      # panda.bucketName = <s3-bucket-with-config>
      # panda.settingsFileKey = <s3-key-with-config>
    }
  }
}

# TODO: short term we put the Guardian permissions library here for backwards compatibility
authorisation.provider {
  className = "com.gu.mediaservice.lib.auth.provider.LocalAuthorisationProvider"
  config {
    # permissions.bucket = <s3-bucket-with-permissions>
  }
}

uploadStatus.recordExpiry = "1 hour"

field.aliases = []

usageRights.applicable = [
  "com.gu.mediaservice.model.NoRights",
  "com.gu.mediaservice.model.Handout",
  "com.gu.mediaservice.model.PrImage",
  "com.gu.mediaservice.model.Screengrab",
  "com.gu.mediaservice.model.SocialMedia",
  "com.gu.mediaservice.model.Agency",
  "com.gu.mediaservice.model.CommissionedAgency",
  "com.gu.mediaservice.model.Chargeable",
  "com.gu.mediaservice.model.Bylines",
  "com.gu.mediaservice.model.StaffPhotographer",
  "com.gu.mediaservice.model.ContractPhotographer",
  "com.gu.mediaservice.model.CommissionedPhotographer",
  "com.gu.mediaservice.model.CreativeCommons",
  "com.gu.mediaservice.model.GuardianWitness",
  "com.gu.mediaservice.model.Pool",
  "com.gu.mediaservice.model.CrownCopyright",
  "com.gu.mediaservice.model.Obituary",
  "com.gu.mediaservice.model.ContractIllustrator",
  "com.gu.mediaservice.model.CommissionedIllustrator",
  "com.gu.mediaservice.model.StaffIllustrator",
  "com.gu.mediaservice.model.Composite",
  "com.gu.mediaservice.model.PublicDomain"
]

usageRightsConfigProvider = {
  className: "com.gu.mediaservice.lib.config.RuntimeUsageRightsConfig"
  config {
    externalStaffPhotographers = []
    internalStaffPhotographers = []
    contractedPhotographers = []
    contractIllustrators = []
    staffIllustrators = []
    creativeCommonsLicense = [
      "CC BY-4.0",
      "CC BY-SA-4.0",
      "CC BY-ND-4.0"
    ]
    freeSuppliers = []
    suppliersCollectionExcl {}
  }
}

domainMetadata.specifications = [
  {
    # Uniquely identifies a specification
    name = "programmes"

    # Represents a human readable name for the specification. Used to render domain metadata collapsible header on the
    # user interface.
    label = "Programmes"

    # Optional string that represents a human readable description of the specification. Rendered in the domain metadata
    # collapsible.
    description = "Model used for Programmes"

    # List of fields belonging to this particular specification.
    fields = [
      {
        # Uniquely identifies a field in a specification
        name = "programmeTitle"

        # Used to render field name and input field label on the user interface.
        label = "Prog. Title"

        # Represents the type of the field and it's value.
        # Valid / supported field type values are:
        #  - string - Represents text based values and renders a single-line text input field
        #  - integer - Represents numeric based values and renders numeric input field
        #  - datetime - Represents date and time values and renders a date and time input field
        #  - select - Represents text based values from controlled vocabularies and renders options as a drop-down list / select field.
        type = "string"

        # List of options rendered in the drop-down list / select field.
        # Mandatory for 'select' type.
        # options = ["Option 1", "Option 2"]
      }
      {
        name = "programmeNumber"
        label = "Prog. Number"
        type = "string"
      }
      {
        name = "programmeMaker"
        label = "Prog. Maker"
        type = "string"
      }
      {
        name = "originalTxDate"
        label = "Original TX Date"
        type = "datetime"
      }
      {
        name = "channels"
        label = "Channels"
        type = "string"
      }
      {
        name = "seriesNumber"
        label = "Series Number"
        type = "string"
      }
      {
        name = "episodeName"
        label = "Episode Name"
        type = "string"
      }
      {
        name = "episodeNumber"
        label = "Episode Number"
        type = "string"
      }
      {
        name = "episodeTxWeek"
        label = "Episode TX Week"
        type = "integer"
      }
      {
        name = "programmeGenre"
        label = "Prog. Genre"
        type = "select"
        options = [
          "Arts",
          "BBC Three",
          "Children's and Learning",
          "Comedy",
          "Continuing Drama",
          "Cookery",
          "Corporate",
          "Costume Drama",
          "Daytime",
          "Drama",
          "Entertainment",
          "Factual",
          "Features",
          "Gardening",
          "History",
          "Nature",
          "News & Current Affairs",
          "Pan BBC",
          "Radio and Music TV",
          "Religion",
          "Science",
          "Science Fiction",
          "Sitcom",
          "Sport",
          "Travel",
          "Weather"
        ]
      }
      {
        name = "productionType"
        label = "Production Type"
        type = "string"
      }
    ]
  }
]
