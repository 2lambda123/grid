AWSTemplateFormatVersion: '2010-09-09'
Description: Image CDN for the Grid

# Required because we appear to have to use AWS::Serverless::Function
# rather than AWS::Lambda::Function so we can access the current version
# to pass to CloudFront
Transform: AWS::Serverless-2016-10-31

Parameters:
  Stack:
    Description: Stack name
    Type: String
    Default: media-service
  
  Stage:
    Description: Stage name
    Type: String
    AllowedValues: ["DEV", "TEST", "PROD"]
  
  DomainNamePrefix:
    Description: The first part of the domain name (eg cdn.media)
    Type: String

  DomainNameSuffix:
    Description: The last part of the domain name (eg gutools.co.uk)
    Type: String
  
  SSLCertificateArn:
    Description: The ACM certificate for the domain name
    Type: String

  PandaSettingsBucket:
    Description: Bucket name where the panda settings live
    Type: String
  
  OriginDomainName:
    Description: Domain name for the bucket where the images live
    Type: String

Resources:
  # TODO MRB:
  #  Can we define the bucket in the same CFN as the other stuff?
  #
  #  You want to have it in the region closest to the majority of
  #  your users to avoid inter-region transfer fees.
  #
  #  Conversely the Lambda@Edge stuff needs to be defined in us-east-1,
  #  presumably so AWS can do the magic and spread the function code
  #  across all their datacenters.
  # OriginBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Sub "${Stack}-origin-${Stage}"
  #     BucketEncryption:
  #       ServerSideEncryptionConfiguration:
  #         - ServerSideEncryptionByDefault:
  #             SSEAlgorithm: aws:kms
  #     Tags:
  #       - { Key: Stack, Value: !Ref Stack }
  #       - { Key: Stage, Value: !Ref Stage }
  
  # TODO MRB: check that we cannot access the bucket directly (unauthenticated)
  CloudFrontAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFrontAccessIdentity ${Stack} ${Stage}'

  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        # This is currently the only class to include Australia
        PriceClass: PriceClass_All
        Origins:
          - Id: !Sub '${Stack}-cdn-${Stage}'
            DomainName: !Ref OriginDomainName
            S3OriginConfig:
              OriginAccessIdentity:
                !Sub 'origin-access-identity/cloudfront/${CloudFrontAccessIdentity}'
        Aliases:
          - !Sub '${DomainNamePrefix}.${DomainNameSuffix}'
        DefaultCacheBehavior:
          Compress: true
          TargetOriginId: !Sub '${Stack}-cdn-${Stage}'
          ViewerProtocolPolicy: https-only
          # DefaultTTL: TODO MRB: should probably be infinite?
          ForwardedValues:
            QueryString: false
          LambdaFunctionAssociations:
            - EventType: viewer-request
              LambdaFunctionARN: !Ref PandaAuthorisationLambda.Version
            - EventType: origin-response
              LambdaFunctionARN: !Ref ImageResizerLambda.Version
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificateArn
          SslSupportMethod: sni-only

      Tags:
        - { Key: Stack, Value: !Ref Stack }
        - { Key: Stage, Value: !Ref Stage }
  
  PandaAuthorisationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Path: /
      Policies:
      - PolicyName: PandaAuthorisationRole
        PolicyDocument:
          Statement:
            - Effect: "Allow"
              Action: ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"]
              Resource: "*"
            - Effect: Allow
              Action: s3:GetObject
              Resource: !Sub 'arn:aws:s3:::${PandaSettingsBucket}/${DomainNameSuffix}.settings.public'

  # Presumably to enhance confusion this type is documented separately from the others in CloudFormation:
  #   https://github.com/awslabs/serverless-application-model/blob/develop/versions/2016-10-31.md#awsserverlessfunction
  # (I think it's because it's actually a transform but who even cares?)
  PandaAuthorisationLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stack}-cdn-panda-${Stage}'
      Description: Checks the Panda cookie to see if the user can access content from the Grid CDN
      CodeUri:
        Bucket: !Sub '${Stack}-cdn-dist'
        Key: !Sub '${Stack}/${Stage}/cdn-panda/cdn-panda.zip'
      MemorySize: 128
      Timeout: 5
      Handler: index.handler
      Role: !GetAtt PandaAuthorisationRole.Arn
      Runtime: nodejs6.10
      AutoPublishAlias: live
      Environment:
        Variables:
          STACK: !Ref Stack
          APP: cdn-panda
          STAGE: !Ref Stage
      Tags:
        Stack: !Ref Stack
        App: 'cdn-panda'
        Stage: !Ref Stage
  
  ImageResizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Path: /
      Policies:
      - PolicyName: ImageResizerRole
        PolicyDocument:
          Statement:
            - Effect: "Allow"
              Action: ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"]
              Resource: "*"

  ImageResizerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stack}-image-resizer-${Stage}'
      Description: Resizes images based on the given query parameters
      CodeUri:
        Bucket: !Sub '${Stack}-cdn-dist'
        Key: !Sub '${Stack}/${Stage}/image-resizer/image-resizer.zip'
      # TODO MRB: what is the right amount of memory to pick here?
      MemorySize: 2048
      Timeout: 30
      Handler: index.handler
      Role: !GetAtt ImageResizerRole.Arn
      Runtime: nodejs6.10
      AutoPublishAlias: live
      Environment:
        Variables:
          STACK: !Ref Stack
          APP: image-resizer
          STAGE: !Ref Stage
      Tags:
        Stack: !Ref Stack
        App: 'image-resizer'
        Stage: !Ref Stage
